{
    // 编译选项
    "compilerOptions": {
        // love
        "baseUrl": ".", // 解析非相对模块名的基准目录。
        "skipLibCheck": true, // 忽略所有的声明文件（ *.d.ts）的类型检查。 可以忽略 types 配置的文件
        "experimentalDecorators": true, // 启用实验性的ES装饰器。
        "target": "ES5", // 编译输出目标 ES 版本
        "downlevelIteration": true, // TypeScript 2.3 在 ES3 和 ES5 为编译目标时由--downlevelIteration编译选项增加了完整的对生成器和迭代器协议的支持。
        "esModuleInterop": true, // 允许从没有设置默认导出的模块中默认导入
        "resolveJsonModule": true, // 引入json文件时使用
        "allowJs": false, // 允许编译javascript文件。
        "allowUnreachableCode": false, // 不报告执行不到的代码错误。
        "allowUnusedLabels": false, // 不报告未使用的标签错误。
        "alwaysStrict": false, // 以严格模式解析并为每个源文件生成 "use strict"语句
        "strictFunctionTypes": false, // 禁用函数参数双向协变检查。
        "allowSyntheticDefaultImports": true,
        "skipDefaultLibCheck": true, // 忽略 库的默认声明文件的类型检查。
        //        "charset": "", // "utf8", // 输入文件的字符集。
        //        "checkJs": false, // 在 .js文件中报告错误。与 "allowJs配合使用。
        //        "declaration": false, // 生成相应的 .d.ts文件。
        //        "declarationDir": "", // 生成声明文件的输出路径。
        //        "diagnostics": false, // 显示诊断信息。
        //        "disableSizeLimit": false, // 禁用JavaScript工程体积大小的限制
        //        "emitBOM": false, // 在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）。
        //        "emitDecoratorMetadata": false, // 给源码里的装饰器声明加上设计类型元数据。
        //        "extendedDiagnostics": false, // 显示详细的诊段信息。
        //        "forceConsistentCasingInFileNames": false, // 禁止对同一个文件的不一致的引用。
        //        "importHelpers": true, // 从 tslib 导入辅助工具函数（比如 __extends， __rest等）
        //        "inlineSourceMap": false, // 生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。
        //        "inlineSources": false, // 将代码与sourcemaps生成到一个文件中，要求同时设置了 "inlineSourceMap或 "sourceMap属性。
        //        "isolatedModules": false, // 将每个文件作为单独的模块（与“ts.transpileModule”类似）。
        //        "jsx": "preserve", // "Preserve", // 在 .tsx文件里支持JSX： "React"或 "Preserve"。查看 JSX。
        //        "jsxFactory": "", // "React.createElement", // 指定生成目标为react JSX时，使用的JSX工厂函数，比如 React.createElement或 h。
        //        "listEmittedFiles": false, // 打印出编译后生成文件的名字。
        //        "listFiles": false, // 编译过程中打印文件名。
        //        "locale": "", // 显示错误信息时使用的语言，比如：en-us。
        //        "mapRoot": "", // 为调试器指定指定sourcemap文件的路径，而不是使用生成时的路径。当 .map文件是在运行时指定的，并不同于 js文件的地址时使用这个标记。指定的路径会嵌入到 sourceMap里告诉调试器到哪里去找它们。
        //        "maxNodeModuleJsDepth": 0, // node_modules依赖的最大搜索深度并加载JavaScript文件。仅适用于 "allowJs。
        //        "module": "esnext",
        //        "moduleResolution": "node", // module === "AMD" or "System" or "ES6" ? "Classic" : "Node", // 决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）。查看模块解析了解详情。
        //        "noEmit": false, // 不生成输出文件。
        //        "noEmitHelpers": false, // 不在输出文件中生成用户自定义的帮助函数代码，如 __extends。
        //        "noEmitOnError": false, // 报错时不生成输出文件。
        //        "noErrorTruncation": false, // 不截短错误消息。
        //        "noFallthroughCasesInSwitch": false, // 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）
        //        "noImplicitAny": false, // 在表达式和声明上有隐含的 any类型时报错。
        //        "noImplicitReturns": false, // 不是函数的所有返回路径都有返回值时报错。
        //        "noImplicitThis": false, // 忽略 this 的类型检查 当 this表达式的值为 any类型的时候，生成一个错误。
        //        "noImplicitUseStrict": false, // 模块输出中不包含 "use strict"指令。
        //        "noLib": false, // 不包含默认的库文件（ lib.d.ts）。
        //        "noResolve": false, // 不把 <reference``>或模块导入的文件加到编译文件列表。
        //        "noStrictGenericChecks": false, // 禁用在函数类型里对泛型签名进行严格检查。
        //        "noUnusedLocals": false, // 若有未使用的局部变量则抛错。
        //        "noUnusedParameters": false, // 若有未使用的参数则抛错。
        //        "outDir": "", // 重定向输出目录。
        //        "preserveConstEnums": false, // 保留 const和 enum声明
        //        "preserveSymlinks": false, // 不把符号链接解析为其真实路径；将符号链接文件视为真正的文件。
        //        "preserveWatchOutput": false, // 保留watch模式下过时的控制台输出。
        //        "pretty": true, // 给错误和消息设置样式，使用颜色和上下文。
        //        "reactNamespace": "", // "React", // 当目标为生成 "react" JSX时，指定 createElement和 __spread的调用对象
        //        "removeComments": false, // 删除所有注释，除了以 /!*开头的版权信息。
        //        "rootDir": "", // (common root directory is computed from the list of input files), // 仅用来控制输出的目录结构 "outDir。
        //        "sourceMap": true, // 生成相应的 .map文件。 是否包含可以用于 debug 的 sourceMap
        //        "sourceRoot": "", // 指定TypeScript源文件的路径，以便调试器定位。当TypeScript文件的位置是在运行时指定时使用此标记。路径信息会被加到 sourceMap里。
        //        "strict": true, // 启用所有严格类型检查选项。 启用 "strict相当于启用 "noImplicitAny, "noImplicitThis, "alwaysStrict， "strictNullChecks和 "strictFunctionTypes和"strictPropertyInitialization。
        //        "strictPropertyInitialization": false, // 确保类的非undefined属性已经在构造函数里初始化。若要令此选项生效，需要同时启用 strictNullChecks。
        //        "strictNullChecks": false, // 定义一个变量就必须给它一个初始值 在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）。
        //        "stripInternal": false, // 不对具有 @internal JSDoc注解的代码生成代码。
        //        "suppressExcessPropertyErrors": false, // 阻止对对象字面量的额外属性检查。
        //        "suppressImplicitAnyIndexErrors": false, // 阻止 "noImplicitAny对缺少索引签名的索引对象报错。
        //        "traceResolution": false, // 生成模块解析日志信息

        "types": [ // 设置引入的定义文件 来禁用自动引入@types包。
            "node",
            "jest",
            "webpack-env",
            "@dcloudio/types",
            "miniprogram-api-typings",
            "mini-types"
        ],
        // 编译过程中需要引入的库文件的列表
        "lib": [
            "esnext",
            "dom",
            "dom.iterable",
            "scripthost",
            "es2015",
            "es5"
        ]
    },
    // ts 管理的文件
    "include": [
        "./package/**/**"
    ],
    // ts 排除的文件
    "exclude": [
        "node_modules/**",
        "packages/**/node_modules/**",
        "dist/**",
        "other/**",
        "unpackage"
    ]
}
